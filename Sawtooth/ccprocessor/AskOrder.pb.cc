// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AskOrder.proto

#include "AskOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class AskOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskOrder>
      _instance;
} _AskOrder_default_instance_;
namespace protobuf_AskOrder_2eproto {
void InitDefaultsAskOrderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_AskOrder_default_instance_;
    new (ptr) ::AskOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AskOrder::InitAsDefaultInstance();
}

void InitDefaultsAskOrder() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAskOrderImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, blockchain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, collateral_blockchain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, collateral_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, transfer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AskOrder, sighash_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AskOrder)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AskOrder_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AskOrder.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016AskOrder.proto\"\272\001\n\010AskOrder\022\022\n\nblockch"
      "ain\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\022\020\n\010interest\030\003 "
      "\001(\t\022\035\n\025collateral_blockchain\030\004 \001(\t\022\022\n\nco"
      "llateral\030\005 \001(\t\022\013\n\003fee\030\006 \001(\t\022\022\n\nexpiratio"
      "n\030\007 \001(\004\022\023\n\013transfer_id\030\010 \001(\t\022\017\n\007sighash\030"
      "\t \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AskOrder.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AskOrder_2eproto

// ===================================================================

void AskOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskOrder::kBlockchainFieldNumber;
const int AskOrder::kAmountFieldNumber;
const int AskOrder::kInterestFieldNumber;
const int AskOrder::kCollateralBlockchainFieldNumber;
const int AskOrder::kCollateralFieldNumber;
const int AskOrder::kFeeFieldNumber;
const int AskOrder::kExpirationFieldNumber;
const int AskOrder::kTransferIdFieldNumber;
const int AskOrder::kSighashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskOrder::AskOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AskOrder_2eproto::InitDefaultsAskOrder();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AskOrder)
}
AskOrder::AskOrder(const AskOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockchain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockchain().size() > 0) {
    blockchain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockchain_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  interest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interest().size() > 0) {
    interest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interest_);
  }
  collateral_blockchain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collateral_blockchain().size() > 0) {
    collateral_blockchain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collateral_blockchain_);
  }
  collateral_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collateral().size() > 0) {
    collateral_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collateral_);
  }
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fee().size() > 0) {
    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  transfer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_id().size() > 0) {
    transfer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_id_);
  }
  sighash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sighash().size() > 0) {
    sighash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sighash_);
  }
  expiration_ = from.expiration_;
  // @@protoc_insertion_point(copy_constructor:AskOrder)
}

void AskOrder::SharedCtor() {
  blockchain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_blockchain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sighash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AskOrder::~AskOrder() {
  // @@protoc_insertion_point(destructor:AskOrder)
  SharedDtor();
}

void AskOrder::SharedDtor() {
  blockchain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_blockchain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sighash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AskOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskOrder::descriptor() {
  ::protobuf_AskOrder_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AskOrder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskOrder& AskOrder::default_instance() {
  ::protobuf_AskOrder_2eproto::InitDefaultsAskOrder();
  return *internal_default_instance();
}

AskOrder* AskOrder::New(::google::protobuf::Arena* arena) const {
  AskOrder* n = new AskOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:AskOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockchain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_blockchain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collateral_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sighash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AskOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AskOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string blockchain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockchain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockchain().data(), static_cast<int>(this->blockchain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.blockchain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), static_cast<int>(this->amount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.amount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interest().data(), static_cast<int>(this->interest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.interest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collateral_blockchain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collateral_blockchain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collateral_blockchain().data(), static_cast<int>(this->collateral_blockchain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.collateral_blockchain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collateral = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collateral()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collateral().data(), static_cast<int>(this->collateral().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.collateral"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fee = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), static_cast<int>(this->fee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.fee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expiration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_id().data(), static_cast<int>(this->transfer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.transfer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sighash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sighash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sighash().data(), static_cast<int>(this->sighash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AskOrder.sighash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AskOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AskOrder)
  return false;
#undef DO_
}

void AskOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AskOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string blockchain = 1;
  if (this->blockchain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockchain().data(), static_cast<int>(this->blockchain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.blockchain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->blockchain(), output);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // string interest = 3;
  if (this->interest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interest().data(), static_cast<int>(this->interest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.interest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interest(), output);
  }

  // string collateral_blockchain = 4;
  if (this->collateral_blockchain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collateral_blockchain().data(), static_cast<int>(this->collateral_blockchain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.collateral_blockchain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->collateral_blockchain(), output);
  }

  // string collateral = 5;
  if (this->collateral().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collateral().data(), static_cast<int>(this->collateral().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.collateral");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->collateral(), output);
  }

  // string fee = 6;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.fee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fee(), output);
  }

  // uint64 expiration = 7;
  if (this->expiration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->expiration(), output);
  }

  // string transfer_id = 8;
  if (this->transfer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_id().data(), static_cast<int>(this->transfer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.transfer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->transfer_id(), output);
  }

  // string sighash = 9;
  if (this->sighash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sighash().data(), static_cast<int>(this->sighash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.sighash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sighash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AskOrder)
}

::google::protobuf::uint8* AskOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AskOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string blockchain = 1;
  if (this->blockchain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockchain().data(), static_cast<int>(this->blockchain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.blockchain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->blockchain(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // string interest = 3;
  if (this->interest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interest().data(), static_cast<int>(this->interest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.interest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->interest(), target);
  }

  // string collateral_blockchain = 4;
  if (this->collateral_blockchain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collateral_blockchain().data(), static_cast<int>(this->collateral_blockchain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.collateral_blockchain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->collateral_blockchain(), target);
  }

  // string collateral = 5;
  if (this->collateral().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collateral().data(), static_cast<int>(this->collateral().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.collateral");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->collateral(), target);
  }

  // string fee = 6;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.fee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fee(), target);
  }

  // uint64 expiration = 7;
  if (this->expiration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->expiration(), target);
  }

  // string transfer_id = 8;
  if (this->transfer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_id().data(), static_cast<int>(this->transfer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.transfer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->transfer_id(), target);
  }

  // string sighash = 9;
  if (this->sighash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sighash().data(), static_cast<int>(this->sighash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AskOrder.sighash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sighash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AskOrder)
  return target;
}

size_t AskOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string blockchain = 1;
  if (this->blockchain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockchain());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // string interest = 3;
  if (this->interest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interest());
  }

  // string collateral_blockchain = 4;
  if (this->collateral_blockchain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collateral_blockchain());
  }

  // string collateral = 5;
  if (this->collateral().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collateral());
  }

  // string fee = 6;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // string transfer_id = 8;
  if (this->transfer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_id());
  }

  // string sighash = 9;
  if (this->sighash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sighash());
  }

  // uint64 expiration = 7;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expiration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AskOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const AskOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AskOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AskOrder)
    MergeFrom(*source);
  }
}

void AskOrder::MergeFrom(const AskOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockchain().size() > 0) {

    blockchain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockchain_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.interest().size() > 0) {

    interest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interest_);
  }
  if (from.collateral_blockchain().size() > 0) {

    collateral_blockchain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collateral_blockchain_);
  }
  if (from.collateral().size() > 0) {

    collateral_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collateral_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.transfer_id().size() > 0) {

    transfer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_id_);
  }
  if (from.sighash().size() > 0) {

    sighash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sighash_);
  }
  if (from.expiration() != 0) {
    set_expiration(from.expiration());
  }
}

void AskOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AskOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskOrder::CopyFrom(const AskOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskOrder::IsInitialized() const {
  return true;
}

void AskOrder::Swap(AskOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskOrder::InternalSwap(AskOrder* other) {
  using std::swap;
  blockchain_.Swap(&other->blockchain_);
  amount_.Swap(&other->amount_);
  interest_.Swap(&other->interest_);
  collateral_blockchain_.Swap(&other->collateral_blockchain_);
  collateral_.Swap(&other->collateral_);
  fee_.Swap(&other->fee_);
  transfer_id_.Swap(&other->transfer_id_);
  sighash_.Swap(&other->sighash_);
  swap(expiration_, other->expiration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskOrder::GetMetadata() const {
  protobuf_AskOrder_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AskOrder_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
