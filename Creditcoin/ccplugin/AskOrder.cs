// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AskOrder.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from AskOrder.proto</summary>
public static partial class AskOrderReflection {

  #region Descriptor
  /// <summary>File descriptor for AskOrder.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AskOrderReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Bc2tPcmRlci5wcm90byK6AQoIQXNrT3JkZXISEgoKYmxvY2tjaGFpbhgB",
          "IAEoCRIOCgZhbW91bnQYAiABKAkSEAoIaW50ZXJlc3QYAyABKAkSHQoVY29s",
          "bGF0ZXJhbF9ibG9ja2NoYWluGAQgASgJEhIKCmNvbGxhdGVyYWwYBSABKAkS",
          "CwoDZmVlGAYgASgJEhIKCmV4cGlyYXRpb24YByABKAQSEwoLdHJhbnNmZXJf",
          "aWQYCCABKAkSDwoHc2lnaGFzaBgJIAEoCWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AskOrder), global::AskOrder.Parser, new[]{ "Blockchain", "Amount", "Interest", "CollateralBlockchain", "Collateral", "Fee", "Expiration", "TransferId", "Sighash" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class AskOrder : pb::IMessage<AskOrder> {
  private static readonly pb::MessageParser<AskOrder> _parser = new pb::MessageParser<AskOrder>(() => new AskOrder());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AskOrder> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AskOrderReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AskOrder() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AskOrder(AskOrder other) : this() {
    blockchain_ = other.blockchain_;
    amount_ = other.amount_;
    interest_ = other.interest_;
    collateralBlockchain_ = other.collateralBlockchain_;
    collateral_ = other.collateral_;
    fee_ = other.fee_;
    expiration_ = other.expiration_;
    transferId_ = other.transferId_;
    sighash_ = other.sighash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AskOrder Clone() {
    return new AskOrder(this);
  }

  /// <summary>Field number for the "blockchain" field.</summary>
  public const int BlockchainFieldNumber = 1;
  private string blockchain_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Blockchain {
    get { return blockchain_; }
    set {
      blockchain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 2;
  private string amount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Amount {
    get { return amount_; }
    set {
      amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "interest" field.</summary>
  public const int InterestFieldNumber = 3;
  private string interest_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Interest {
    get { return interest_; }
    set {
      interest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "collateral_blockchain" field.</summary>
  public const int CollateralBlockchainFieldNumber = 4;
  private string collateralBlockchain_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CollateralBlockchain {
    get { return collateralBlockchain_; }
    set {
      collateralBlockchain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "collateral" field.</summary>
  public const int CollateralFieldNumber = 5;
  private string collateral_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Collateral {
    get { return collateral_; }
    set {
      collateral_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fee" field.</summary>
  public const int FeeFieldNumber = 6;
  private string fee_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Fee {
    get { return fee_; }
    set {
      fee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "expiration" field.</summary>
  public const int ExpirationFieldNumber = 7;
  private ulong expiration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Expiration {
    get { return expiration_; }
    set {
      expiration_ = value;
    }
  }

  /// <summary>Field number for the "transfer_id" field.</summary>
  public const int TransferIdFieldNumber = 8;
  private string transferId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransferId {
    get { return transferId_; }
    set {
      transferId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sighash" field.</summary>
  public const int SighashFieldNumber = 9;
  private string sighash_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sighash {
    get { return sighash_; }
    set {
      sighash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AskOrder);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AskOrder other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Blockchain != other.Blockchain) return false;
    if (Amount != other.Amount) return false;
    if (Interest != other.Interest) return false;
    if (CollateralBlockchain != other.CollateralBlockchain) return false;
    if (Collateral != other.Collateral) return false;
    if (Fee != other.Fee) return false;
    if (Expiration != other.Expiration) return false;
    if (TransferId != other.TransferId) return false;
    if (Sighash != other.Sighash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Blockchain.Length != 0) hash ^= Blockchain.GetHashCode();
    if (Amount.Length != 0) hash ^= Amount.GetHashCode();
    if (Interest.Length != 0) hash ^= Interest.GetHashCode();
    if (CollateralBlockchain.Length != 0) hash ^= CollateralBlockchain.GetHashCode();
    if (Collateral.Length != 0) hash ^= Collateral.GetHashCode();
    if (Fee.Length != 0) hash ^= Fee.GetHashCode();
    if (Expiration != 0UL) hash ^= Expiration.GetHashCode();
    if (TransferId.Length != 0) hash ^= TransferId.GetHashCode();
    if (Sighash.Length != 0) hash ^= Sighash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Blockchain.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Blockchain);
    }
    if (Amount.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Amount);
    }
    if (Interest.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Interest);
    }
    if (CollateralBlockchain.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(CollateralBlockchain);
    }
    if (Collateral.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Collateral);
    }
    if (Fee.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Fee);
    }
    if (Expiration != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Expiration);
    }
    if (TransferId.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(TransferId);
    }
    if (Sighash.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Sighash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Blockchain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Blockchain);
    }
    if (Amount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
    }
    if (Interest.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Interest);
    }
    if (CollateralBlockchain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CollateralBlockchain);
    }
    if (Collateral.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Collateral);
    }
    if (Fee.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Fee);
    }
    if (Expiration != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Expiration);
    }
    if (TransferId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransferId);
    }
    if (Sighash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sighash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AskOrder other) {
    if (other == null) {
      return;
    }
    if (other.Blockchain.Length != 0) {
      Blockchain = other.Blockchain;
    }
    if (other.Amount.Length != 0) {
      Amount = other.Amount;
    }
    if (other.Interest.Length != 0) {
      Interest = other.Interest;
    }
    if (other.CollateralBlockchain.Length != 0) {
      CollateralBlockchain = other.CollateralBlockchain;
    }
    if (other.Collateral.Length != 0) {
      Collateral = other.Collateral;
    }
    if (other.Fee.Length != 0) {
      Fee = other.Fee;
    }
    if (other.Expiration != 0UL) {
      Expiration = other.Expiration;
    }
    if (other.TransferId.Length != 0) {
      TransferId = other.TransferId;
    }
    if (other.Sighash.Length != 0) {
      Sighash = other.Sighash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Blockchain = input.ReadString();
          break;
        }
        case 18: {
          Amount = input.ReadString();
          break;
        }
        case 26: {
          Interest = input.ReadString();
          break;
        }
        case 34: {
          CollateralBlockchain = input.ReadString();
          break;
        }
        case 42: {
          Collateral = input.ReadString();
          break;
        }
        case 50: {
          Fee = input.ReadString();
          break;
        }
        case 56: {
          Expiration = input.ReadUInt64();
          break;
        }
        case 66: {
          TransferId = input.ReadString();
          break;
        }
        case 74: {
          Sighash = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
